Node.js is a platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.
Features of Node.js:-License, Open source, No buffering, Highly Scalable, Single threaded, I/O is Asynchronous and Event Driven, Extremely fast.
npm  version is used to check the version of the npm.
"npm search express" command is used to search express or module.
to evaluate an argument:- node -e/node --eval not only evaluate but also printing :- node -p/--print
timers a re global functions.
1, Standard JavaScript errors i.e. <EvalError>, <SyntaxError>, <RangeError>, <ReferenceError>(like any variable not defined), <TypeError>, <URIError> etc.
2, System errors
3, User-specified errors
4, Assertion errors
Node.js provides the ability to perform socket programming. We can create chat application or communicate client and server applications using socket programming in Node.js. The Node.js net module contains functions for creating both servers and clients.
node debug main.js used to debug the file
child_process.exec() method: This method runs a command in a console and buffers the output.
child_process.spawn() method: This method launches a new process with a given command.
child_process.fork() method: This method is a special case of spawn() method to create child processes.
Streams are the objects that facilitate you to read data from a source and write data to a destination. there are 4 types of streams:- read, write, duplex, transform.
Each type of stream is an Event emitter instance and throws several events at different times. there are 4 types of events:-data, error, end, finish.
Piping is a mechanism where output of one stream is used as input to another stream. There is no limit on piping operation.
The Node.js Assert is the most elementary way to write tests. It provides no feedback when running your test unless one fails. The assert module provides a simple set of assertion tests that can be used to test invariants. The module is intended for internal use by Node.js, but can be used in application code via require ('assert').
in node we use url, URL is used to handle URL-related operations, and URLSearchParams helps with manipulating URL query parameters.

EXPRESS
The req.cookies property is used when the user is using cookie-parser middleware.(npm install cookie-parser)
app.set is used to set the value of a key-value pair.
The res.app property holds a reference to the instance of the Express application that is using the middleware. 
The res.headersSent property is a boolean property that indicates if the app sent HTTP headers for the response. we can set header through res.send inirectly by sending its body.
The res.cookie() function is used to set a cookie in the clientâ€™s browser. it will be automatically converted into JSON.
The express-session middleware allows the creation and storage of the session data used for authentication or user preferences. Using this middleware, we can properly maintain the stateful interaction between the Express.js server and the client.
body parser is a thrid party application.
for testing an express app, there are many options available like Thunder client, PAW, etc.
Express and Multer (middleware for handling file uploads).
The GET method is mainly used on the client side to send a request to a specified server to get certain data or resources.
in express, we can do search and filtering by the query parameters passed in the link from the client to the server as a request.
JSON Web Token (JWT) authentication in an Express.js application secures routes by ensuring that only authenticated users can access specific resources. they are stateless. express, mongoose, and JSON web token are essential modules.
CORS is all about protecting user from  malicious sites. it is a browser-based protocol in which a website can't access  resource from another website/API/Server but the browser generally won't allow few resources according to its policy but CORS helps to overlook this and lets the browser to display the info of the website on the website displayed currently. npm i express cors
app.use() is used to define middleware that executes on every request, regardless of the HTTP method (GET, POST, PUT, DELETE, etc.). It can be used to define middleware that runs only for specific URL paths. If no path is specified, it applies to all routes.
The .env file is used for storing sensitive information in a web application which we don't want to expose to others like password, database connection string etc.
