NODE:-
Node.js runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient.
The fs.appendFile() method appends specified content to a file. If the file does not exist, the file will be created.
The fs.writeFile() method replaces the specified file and content if it exists. If the file does not exist, a new file, containing the specified content, will be created.
To delete a file with the File System module,  use the fs.unlink() method.
To rename a file with the File System module,  use the fs.rename() method.
Parse an address with the url.parse() method, and it will return a URL object with each part of the address as properties
A package in Node.js contains all the files you need for a module.
Modules are JavaScript libraries you can include in your project.
NPM creates a folder named "node_modules", where the package will be placed. All packages you install in the future will be placed in this folder.
To include the built-in Events module use the require() method. In addition, all event properties and methods are an instance of an EventEmitter object. To be able to access these properties and methods, create an EventEmitter object:
var events = require('events');
var eventEmitter = new events.EventEmitter();
There is a very good module for working with file uploads, called "Formidable".
Include the Formidable module to be able to parse the uploaded file once it reaches the server.
The Nodemailer module makes it easy to send emails from your computer.
MySQL:-var mysql = require('mysql');
var con = mysql.createConnection({
  host: "localhost",
  user: "yourusername",
  password: "yourpassword"
});

con.connect(function(err) {
  if (err) throw err;
  console.log("Connected!");
  con.query("CREATE DATABASE mydb", function (err, result) {
    if (err) throw err;
    console.log("Database created");
  });
});

EXPRESS:-
.flattenDeep is a lodash method which itself is an external module. which is used to convert a nested array into a single one
Why use util.promisify()?
Some Node.js functions (like fs.readFile(), fs.writeFile(), etc.) use callbacks by default. util.promisify() helps you convert those functions into Promise-based versions, allowing you to use async/await or .then() chaining.
few built-in middlewares in express is .static.express.json, .urlEncoded(), Router(), raw() and these middlewares are appled to the code using .use()
.use() can handle errors too
Middleware functions in Express.js can perform several important tasks:
Execute Code: Middleware can run any code when a request is received.
Modify Request and Response: Middleware can modify both the request (req) and response (res) objects.
End the Request-Response Cycle: Middleware can send a response to the client, ending the cycle.
Call the Next Middleware: Middleware can call next() to pass control to the next function in the middleware stack.

Types of middleware:-
1. Application-level Middleware
Application-level middleware is bound to the entire Express application using app.use() or app.METHOD(). It executes for all routes in the application, regardless of the specific path or HTTP method.
2. Router-level Middleware
Router-level middleware is applied to a specific router instance using router.use() or router.METHOD(). It only applies to routes defined within that particular router, making it perfect for modular applications where middleware is only relevant to specific groups of routes.
3. Error-handling Middleware
Error-handling middleware is a special type of middleware used to catch and respond to errors during the request-response cycle. It is defined with four parameters: err, req, res, next.
5. Third-party Middleware
Third-party middleware is developed by external developers and packaged as npm modules. These middleware packages add additional functionality to your application, such as request logging, security features, or data validation.

Advantages of Middleware:-
1, Modularity.
2, Reusability.
3, Maintainability.
4, Error Handling.
5, Performance Optimization.

RESTful API:- A RESTful API is an API that follows the principles of REST (Representational State Transfer). It's a standard way to structure communication between client (like a website or app) and server over the web, usually using HTTP.
1, Each request is independent — the server doesn't remember previous requests; all info must come with the request.
2, The client (browser/app) and server operate separately — they only communicate via requests and responses.
3, Most RESTful APIs send responses in JSON format — clean, lightweight, and easy to use.
4, Everything is treated as a resource (like /users, /products) and accessed via clear, meaningful URLs.

Few req properties used in Express:-
1, 'req.query': Access query string parameters.
2, 'req.params': Access route parameters.
3, 'req.body': Access the body of the request (for POST/PUT).
4, 'req.headers': Access request headers.
5, 'req.method': HTTP method (e.g., GET, POST).
6, 'req.url': URL of the request.

Error Handling:-
Error handling in Express refers to the process of managing errors that occur during the execution of a request. When an error occurs in a route or middleware, Express provides mechanisms to catch these errors and prevent the application from crashing. Error-handling middleware allows developers to:
1, Log errors for debugging.
2, Send structured error responses to users.
3, Maintain application stability even when issues arise.
4, Good error handling makes an application more reliable and user-friendly, improving both developer efficiency and the user experience.

error handling can be done either automatically or we can use error-handling middleware.

In express, there is a module present called DEBUG that gives log information. It tells about middleware functions, application mode, their status, and also about the requests and responses made to the server.
DEBUG = express:application,express:router node index.js

The express.raw() function is a built-in middleware function in Express. It parses incoming request payloads into a Buffer and is based on body-parser. 
The express.static() is a built-in middleware function in Express.js that allows you to serve static files (like images, HTML, CSS, and JavaScript) directly to the client. It automatically makes all files inside a specified folder accessible via HTTP requests. You don’t have to create custom routes for each file.
The express.urlencoded() middleware in Express.js is used to parse URL-encoded form data, making it accessible as a JavaScript object in req.body. It’s essential for handling form submissions in application/x-www-form-urlencoded format.
