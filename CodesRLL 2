userService.js
async resetPassword(userId, email, newPassword, confirmPassword) {
    const user = await UserDAL.findById(userId)|| UserDAL.findByEmail(email);
    if(!user) throw new Error("User not found")
    
    const samePassword=await UserDAL.checkPassword(newPassword);
    if(samePassword) throw new Error("Cannot use previous password") 

    if(newPassword!==confirmPassword) throw new Error("Passwords don't match")
    
    if(newPassword<8) throw new Error('Password must be atleast 8 characters')

    user.password=newPassword;
    await user.save();
    return user;
  }

userModel.js
userSchema.methods.checkPassword = async function (candidateNewPassword) {
  if(candidateNewPassword===this.password) return true
  return false
};

userController.js
async resetPassword(req, res) {
    try {
      const {email, newPassword, confirmPassword}=req.body;
      if(!email || !newPassword || !confirmPassword) {
        return res.status(400).json({ message: 'Enter the required fields' });
      }
      await UserService.resetPassword(req.user?.id, email, newPassword, confirmPassword);
      res.json({message: 'Password Updated Successfully'});
    } catch(err) {
      console.log("password reset error: ", err.message);
      const statusCode=err.message.includes('not found')?404:400;
      res.status(statusCode).json({
        message:err.message || 'Password reset failed'
      });
    }
  }

userRoute.js
router.put('/reset-password', userController.resetPassword);

{
    "message": "user.checkPassword is not a function"
}
