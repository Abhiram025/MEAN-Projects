carModel.js
const mongoose = require('mongoose');

const carSchema = new mongoose.Schema({
  make: { type: String, required: true },
  model: { type: String, required: true },
  cartype: { 
    type: String, 
    required: true,
    enum: ['hyundai', 'sedan', 'suv', 'force', 'honda'] 
  },
  carCategory: { 
    type: String, 
    required: true,
    enum: ['economy', 'premier', 'luxury'] 
  },
  year: { type: Number, required: true },
  pricePerKm: { 
    type: Number,
    required: true,
    min: [0.01, 'Price per km must be positive'], // Minimum 0.01
    validate: {
      validator: Number.isFinite,
      message: 'Price per km must be a valid number'
    }
   },
  pricePerDay: { 
    type: Number,
    required: true,
    min: [0.01, 'Price per day must be positive'], // Minimum 0.01
    validate: {
      validator: Number.isFinite,
      message: 'Price per day must be a valid number'
    }
  },
  availabilityStatus: { 
    type: String, 
    enum: ['available', 'rented', 'maintenance'], 
    default: 'available' 
  },
  currentOdometer: { type: Number, required: true },
  imageUrl: [String],
  features: [String]
}, { timestamps: true });


module.exports = mongoose.model('Car', carSchema);

carRouter.js
const express = require('express');
const router = express.Router();
const carController = require('../controllers/carController');
const { authenticate } = require('../middleware/auth');
const multer=require('multer');

const storage=multer.diskStorage({
    destination: function(req,file,cb) {
        cb(null, 'uploads/')
    },
    filename: function(req,file,cb) {
        cb(null,Date.now()+'-'+file.originalname)
    }
});

const upload=multer({storage: storage})


// Public routes
router.get('/', carController.getAvailableCars);
router.get('/:id', carController.getCarById);
router.get('/type/:cartype', carController.getCarsByType);

// Admin-only routes
router.use(authenticate);
router.post('/', upload.array('images', 5) ,carController.createCar);
router.put('/:id', upload.array('images', 5) ,carController.updateCar);
router.delete('/:id', carController.deleteCar);

module.exports = router;

carController.js
const CarService = require('../services/carService');
const path=require('path')

class CarController {
  async createCar(req, res) {
    try {
      if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Forbidden' });
      }

      const imageUrls = req.files ? req.files.map(file => file.path) : [];
      const carData = { ...req.body, imageUrl: imageUrls }
      const car = await CarService.createCar(carData);
      res.status(201).json(car);
    } catch (error) {
      console.log("you are not admin")
      res.status(400).json({ message: error.message });
    }
  }

  async updateCar(req, res) {
    try {
      if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Forbidden' });
      }

      const imageUrls = req.files ? req.files.map(file => file.path) : [];
      const carData = { ...req.body, imageUrl: imageUrls }
      const car = await CarService.updateCar(req.params.id, carData);
      res.json(car);
    } catch (error) {
      res.status(400).json({ message: error.message });
    }
  }

  async deleteCar(req, res) {
    try {
      if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Forbidden' });
      }
      await CarService.deleteCar(req.params.id);
      res.json({ message: 'Car deleted successfully' });
    } catch (error) {
      res.status(400).json({ message: error.message });
    }
  }

  async getAvailableCars(req, res) {
    try {
      const cars = await CarService.getAvailableCars();
      res.json(cars);
    } catch (error) {
      res.status(400).json({ message: error.message });
    }
  }

  async getCarsByType(req, res) {
    try {
      const cars = await CarService.getCarsByType(req.params.cartype);
      res.json(cars);
    } catch (error) {
      res.status(400).json({ message: error.message });
    }
  }

  async getCarById(req, res) {
    try {
      const car = await CarService.getCarById(req.params.id);
      res.json(car);
    } catch (error) {
      res.status(404).json({ message: error.message });
    }
  }
}

module.exports = new CarController();

carService.js
const CarDAL = require('../dal/carDal');

class CarService {
  async createCar(carData) {
    return await CarDAL.create(carData);
  }

  async updateCar(carId, carData) {
    return await CarDAL.updateById(carId, carData);
  }

  async deleteCar(carId) {
    return await CarDAL.deleteById(carId);
  }

  async getAvailableCars() {
    return await CarDAL.findAvailableCars();
  }

  async getCarsByType(carType) {
    return await CarDAL.findByType(carType);
  }

  async getCarById(carId) {
    return await CarDAL.findById(carId);
  }
}

module.exports = new CarService();

carDal.js
const BaseDAL = require('./baseDal');
const Car = require('../models/carModel');

class CarDAL extends BaseDAL {
  constructor() {
    super(Car);
  }

  async findAvailableCars() {
    return await this.find({ availabilityStatus: 'available' });
  }

  async findByType(carType) {
    return await this.find({ cartype: { $regex: new RegExp(`^${carType}$`, 'i') }, availabilityStatus: 'available' });
  }
}

module.exports = new CarDAL();

baseDal.js
class BaseDAL {
  constructor(model) {
    this.model = model;
  }

  find(conditions = {}) {
    return this.model.find(conditions);
  }

  async create(data) {
    return await this.model.create(data);
  }

  findById(id) {
    return this.model.findById(id);
  }

  async findByIdAndPopulate(id, populatePaths) {
    return await this.model.findById(id).populate(populatePaths);
  }

  async findOne(conditions) {
    return await this.model.findOne(conditions);
  }

  async find(conditions = {}) {
    return await this.model.find(conditions);
  }

  async updateById(id, data) {
    return await this.model.findByIdAndUpdate(id, data, { new: true });
  }

  async deleteById(id) {
    return await this.model.findByIdAndDelete(id);
  }
}

module.exports = BaseDAL;

app.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const config = require('./config');
const path=require('path')

// Import routes
const authRoutes = require('./routes/authRouter');
const userRoutes = require('./routes/userRouter');
const carRoutes = require('./routes/carRouter');
const taxRoutes = require('./routes/taxRouter');
const rentalRoutes = require('./routes/rentalRouter');

// Initialize Express app
const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use('/uploads', express.static('uploads'));

// Connect to MongoDB
mongoose.connect(config.MONGODB_URI)
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('MongoDB connection error:', err));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/cars', carRoutes);
app.use('/api/taxes', taxRoutes);
app.use('/api/rentals', rentalRoutes);

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: 'Something went wrong!' });
});

app.listen(config.PORT, () => {
  console.log(`Server running on port ${config.PORT}`);
});


auth.js
const jwt = require('jsonwebtoken');
const config = require('../config');

module.exports = {
  authenticate: (req, res, next) => {
    const authHeader = req.headers['authorization'] || req.headers['Authorization'];
    if (!authHeader) {
      return res.status(401).json({ message: 'No token, authorization denied' });
    }

    const token=authHeader.replace(/^Bearer\s+/i, '')
    console.log("Extracted token: ", token)//debug

    if(!token) {
      return res.status(401).json({message: 'No token, authorization denied'})
    }
    try {
      const decoded = jwt.verify(token, config.JWT_SECRET);
      console.log('Decoded Token Payload: ', decoded)//debug
      req.user = decoded;
      next();
    } catch (error) {
      console.error('JWT Verification Error: ', error)//debug
      res.status(401).json({ message: 'Token is not valid' });
    }
  },

  authorizeAdmin: (req, res, next) => {
    if (req.user.role !== 'admin') {
      return res.status(403).json({ message: 'Forbidden' });
    }
    next();
  }
};
