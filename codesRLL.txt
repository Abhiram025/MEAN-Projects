carController.js
const CarService = require('../services/carService');

class CarController {
  async createCar(req, res) {
    try {
      if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Forbidden' });
      }
      // if (!req.body.registrationNumber) {
      //   return res.status(400).json({ message: 'Registration number is required' });
      // }
      const car = await CarService.createCar(req.body);
      res.status(201).json(car);
    } catch (error) {
      console.log("you are not admin")
      res.status(400).json({ message: error.message });
    }
  }

  async updateCar(req, res) {
    try {
      if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Forbidden' });
      }
      const car = await CarService.updateCar(req.params.id, req.body);
      res.json(car);
    } catch (error) {
      res.status(400).json({ message: error.message });
    }
  }

  async deleteCar(req, res) {
    try {
      if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Forbidden' });
      }
      await CarService.deleteCar(req.params.id);
      res.json({ message: 'Car deleted successfully' });
    } catch (error) {
      res.status(400).json({ message: error.message });
    }
  }

  async getAvailableCars(req, res) {
    try {
      const cars = await CarService.getAvailableCars();
      res.json(cars);
    } catch (error) {
      res.status(400).json({ message: error.message });
    }
  }

  async getCarsByType(req, res) {
    try {
      const cars = await CarService.getCarsByType(req.params.type);
      res.json(cars);
    } catch (error) {
      res.status(400).json({ message: error.message });
    }
  }

  async getCarById(req, res) {
    try {
      const car = await CarService.getCarById(req.params.id);
      res.json(car);
    } catch (error) {
      res.status(404).json({ message: error.message });
    }
  }
}

module.exports = new CarController();

carDal.js
const BaseDAL = require('./baseDal');
const Car = require('../models/carModel');

class CarDAL extends BaseDAL {
  constructor() {
    super(Car);
  }

  async findAvailableCars() {
    return await this.find({ availabilityStatus: 'available' });
  }

  async findByType(carType) {
    return await this.find({ type: carType, availabilityStatus: 'available' });
  }
}

module.exports = new CarDAL();

carModel.js
const mongoose = require('mongoose');

const carSchema = new mongoose.Schema({
  make: { type: String, required: true },
  model: { type: String, required: true },
  cartype: { 
    type: String, 
    required: true,
    enum: ['hyundai-i20', 'sedan', 'suv', 'force traveller', 'honda city'] 
  },
  carCategory: { 
    type: String, 
    required: true,
    enum: ['economy', 'premier', 'luxury'] 
  },
  year: { type: Number, required: true },
  pricePerKm: { type: Number, required: true },
  pricePerDay: { type: Number, required: true },
  availabilityStatus: { 
    type: String, 
    enum: ['available', 'rented', 'maintenance'], 
    default: 'available' 
  },
  currentOdometer: { type: Number, required: true },
  imageUrl: String,
  features: [String]
}, { timestamps: true });

module.exports = mongoose.model('Car', carSchema);

carRouter.js
const express = require('express');
const router = express.Router();
const carController = require('../controllers/carController');
const { authenticate } = require('../middleware/auth');

// Public routes
router.get('/', carController.getAvailableCars);
router.get('/:id', carController.getCarById);
router.get('/type/:type', carController.getCarsByType);

// Admin-only routes
router.use(authenticate);
router.post('/', carController.createCar);
router.put('/:id', carController.updateCar);
router.delete('/:id', carController.deleteCar);

module.exports = router;

carService.js
const CarDAL = require('../dal/carDal');

class CarService {
  async createCar(carData) {
    return await CarDAL.create(carData);
  }

  async updateCar(carId, carData) {
    return await CarDAL.updateById(carId, carData);
  }

  async deleteCar(carId) {
    return await CarDAL.deleteById(carId);
  }

  async getAvailableCars() {
    return await CarDAL.findAvailableCars();
  }

  async getCarsByType(carType) {
    return await CarDAL.findByType(carType);
  }

  async getCarById(carId) {
    return await CarDAL.findById(carId);
  }
}

module.exports = new CarService();
these are the codes for my car CRUD operations im getting this error in postman
{
    "message": "E11000 duplicate key error collection: carzy_rentals.cars index: registrationNumber_1 dup key: { registrationNumber: null }"
}

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MjJjZTEyOGM1ZjE2OTQ4YWIzODRlZSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NzExMjE1NywiZXhwIjoxNzQ3MTk4NTU3fQ.SGj6C4CsoaQFPtqndBuKKePudKymEM0hU4jE06QkNqM-admin1 token
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkplZXZhNjg3Iiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzQ3MTI0MzUzLCJleHAiOjE3NDk3MTYzNTN9.8iEIw6jsLX9DiqvkOzy8lGxSALIBSTeCytVoPiDL9Yg-admin2 token
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlJpdGVzaDEzMTEiLCJyb2xlIjoidXNlciIsImlhdCI6MTc0NzExOTM1NSwiZXhwIjoxNzQ5NzExMzU1fQ.r_PFL-lbuBoE7XGFnhjd9-fkek6utO6DRTvuLAKXWfU-user token


