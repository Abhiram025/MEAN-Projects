MODELS:-
1, models/User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true, required: true },
  password: String,
  phone: String,
  address: String,
  role: { type: String, enum: ['user', 'admin'], default: 'user' },
  loyaltyPoints: { type: Number, default: 0 },
  rentals: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Rental' }],
}, { timestamps: true });

module.exports = mongoose.model('User', userSchema);

2, models/Car.js
const mongoose = require('mongoose');

const carSchema = new mongoose.Schema({
  brand: String,
  model: String,
  type: { type: String, enum: ['SUV', 'Sedan', 'Compact', 'Mini-van', 'Luxury'] },
  registrationNumber: { type: String, unique: true },
  pricePerKm: Number,
  perDayRentalCost: Number,
  isAvailable: { type: Boolean, default: true },
  odoMeter: Number,
  imageUrl: String
}, { timestamps: true });

module.exports = mongoose.model('Car', carSchema);

3, models/Rental.js
const mongoose = require('mongoose');

const rentalSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  carId: { type: mongoose.Schema.Types.ObjectId, ref: 'Car' },
  startDate: Date,
  endDate: Date,
  odoStart: Number,
  odoEnd: Number,
  distanceTravelled: Number,
  rentalCost: Number,
  discount: Number,
  tax: Number,
  loyaltyDiscount: Number,
  status: { type: String, enum: ['booked', 'rented', 'completed', 'cancelled'], default: 'booked' }
}, { timestamps: true });

module.exports = mongoose.model('Rental', rentalSchema);

4, models/tax.js
const mongoose = require('mongoose');

const taxSchema = new mongoose.Schema({
  carType: { type: String, enum: ['basic', 'mid-range', 'luxury'], unique: true },
  taxRate: Number
});

module.exports = mongoose.model('Tax', taxSchema);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Great. Let's begin with the Data Access Layer (DAL) and Service Layer setup for the Car model as an example. You can replicate this structure for User, Rental, and Tax.
1, DAL/carDAL.js(Data Access Layer)
const Car = require('../models/Car');

const carDAL = {
  createCar: async (carData) => await Car.create(carData),

  getAllCars: async () => await Car.find(),

  getCarById: async (id) => await Car.findById(id),

  updateCarById: async (id, updateData) => await Car.findByIdAndUpdate(id, updateData, { new: true }),

  deleteCarById: async (id) => await Car.findByIdAndDelete(id),

  getAvailableCars: async () => await Car.find({ isAvailable: true })
};

module.exports = carDAL;

2, services/carService.js (Service Layer)
const carDAL = require('../dal/carDAL');

const carService = {
  addCar: async (carData) => await carDAL.createCar(carData),

  fetchAllCars: async () => await carDAL.getAllCars(),

  fetchCarById: async (id) => await carDAL.getCarById(id),

  modifyCar: async (id, updateData) => await carDAL.updateCarById(id, updateData),

  removeCar: async (id) => await carDAL.deleteCarById(id),

  fetchAvailableCars: async () => await carDAL.getAvailableCars()
};

module.exports = carService;

3, controllers/carController.js (REST Controller)
const express = require('express');
const router = express.Router();
const carService = require('../services/carService');

// CREATE Car
router.post('/', async (req, res) => {
  try {
    const newCar = await carService.addCar(req.body);
    res.status(201).json(newCar);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// READ All Cars
router.get('/', async (req, res) => {
  try {
    const cars = await carService.fetchAllCars();
    res.status(200).json(cars);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// READ Car by ID
router.get('/:id', async (req, res) => {
  try {
    const car = await carService.fetchCarById(req.params.id);
    car ? res.status(200).json(car) : res.status(404).json({ message: 'Car not found' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// UPDATE Car
router.put('/:id', async (req, res) => {
  try {
    const updatedCar = await carService.modifyCar(req.params.id, req.body);
    updatedCar ? res.status(200).json(updatedCar) : res.status(404).json({ message: 'Car not found' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// DELETE Car
router.delete('/:id', async (req, res) => {
  try {
    const deletedCar = await carService.removeCar(req.params.id);
    deletedCar ? res.status(200).json({ message: 'Car deleted' }) : res.status(404).json({ message: 'Car not found' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

module.exports = router;
----------------------------------------------------------------------------------------------------------------------------------------------------
Let's now implement the DAL, Service, and Controller for the Rental model.
1,dal/rentalDAL.js
const Rental = require('../models/Rental');

const rentalDAL = {
  createRental: async (rentalData) => await Rental.create(rentalData),

  getAllRentals: async () => await Rental.find().populate('userId carId'),

  getRentalsByUserId: async (userId) => await Rental.find({ userId }).populate('carId'),

  getRentalById: async (id) => await Rental.findById(id).populate('userId carId'),

  updateRentalById: async (id, updateData) => await Rental.findByIdAndUpdate(id, updateData, { new: true }),

  deleteRentalById: async (id) => await Rental.findByIdAndDelete(id)
};

module.exports = rentalDAL;

2,services/rentalService.js
const rentalDAL = require('../dal/rentalDAL');

const rentalService = {
  create: async (rentalData) => await rentalDAL.createRental(rentalData),

  getAll: async () => await rentalDAL.getAllRentals(),

  getByUserId: async (userId) => await rentalDAL.getRentalsByUserId(userId),

  getById: async (id) => await rentalDAL.getRentalById(id),

  update: async (id, data) => await rentalDAL.updateRentalById(id, data),

  remove: async (id) => await rentalDAL.deleteRentalById(id)
};

module.exports = rentalService;

3,controllers/rentalController.js
const express = require('express');
const router = express.Router();
const rentalService = require('../services/rentalService');

// Create Rental
router.post('/', async (req, res) => {
  try {
    const rental = await rentalService.create(req.body);
    res.status(201).json(rental);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get All Rentals
router.get('/', async (req, res) => {
  try {
    const rentals = await rentalService.getAll();
    res.status(200).json(rentals);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get Rentals by User ID
router.get('/user/:userId', async (req, res) => {
  try {
    const rentals = await rentalService.getByUserId(req.params.userId);
    res.status(200).json(rentals);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Get Rental by ID
router.get('/:id', async (req, res) => {
  try {
    const rental = await rentalService.getById(req.params.id);
    rental ? res.status(200).json(rental) : res.status(404).json({ message: 'Rental not found' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Update Rental
router.put('/:id', async (req, res) => {
  try {
    const updated = await rentalService.update(req.params.id, req.body);
    updated ? res.status(200).json(updated) : res.status(404).json({ message: 'Rental not found' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Delete Rental
router.delete('/:id', async (req, res) => {
  try {
    const deleted = await rentalService.remove(req.params.id);
    deleted ? res.status(200).json({ message: 'Rental deleted' }) : res.status(404).json({ message: 'Rental not found' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

module.exports = router;

Since you've already created DAL, service, and controller layers for both Car and Rental, the next logical and efficient move is to:
1, Set up the Express app structure.
2, Integrate the routers
3,Test the endpoints using Postman/Swagger
----------------------------------------------------------------------------------------------------------------------------------------------------
This way you can:
1, See real responses from your API.
2, Confirm that everything is wired correctly.
3, Start building the front end confidently.

Perfect. Here's how to set up your Express application and integrate the Car and Rental controllers.
1, app.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const carRoutes = require('./controllers/carController');
const rentalRoutes = require('./controllers/rentalController');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Routes
app.use('/api/cars', carRoutes);
app.use('/api/rentals', rentalRoutes);

// Root
app.get('/', (req, res) => res.send('Welcome to Carzy API'));

// DB Connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('Connected to MongoDB');
  app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
}).catch((err) => console.error('MongoDB connection error:', err));

2,.env
MONGO_URI=mongodb://localhost:27017/carzy
PORT=5000
---------------------------------------------------------------------------------------------------------
 Let's now build the User module — including registration, login with captcha (you can integrate Google reCAPTCHA later), password change, and profile management.
1, dal/userDAL.js
const User = require('../models/User');

const userDAL = {
  createUser: async (userData) => await User.create(userData),

  getUserByEmail: async (email) => await User.findOne({ email }),

  getUserById: async (id) => await User.findById(id),

  updateUserById: async (id, data) => await User.findByIdAndUpdate(id, data, { new: true }),

  deleteUserById: async (id) => await User.findByIdAndDelete(id)
};

module.exports = userDAL;

2, services/userService.js
const bcrypt = require('bcrypt');
const userDAL = require('../dal/userDAL');

const userService = {
  register: async (data) => {
    const existing = await userDAL.getUserByEmail(data.email);
    if (existing) throw new Error('Email already registered');
    const hashedPassword = await bcrypt.hash(data.password, 10);
    return await userDAL.createUser({ ...data, password: hashedPassword });
  },

  login: async (email, password) => {
    const user = await userDAL.getUserByEmail(email);
    if (!user) throw new Error('User not found');
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) throw new Error('Invalid password');
    return user;
  },

  getProfile: async (id) => await userDAL.getUserById(id),

  updateProfile: async (id, data) => await userDAL.updateUserById(id, data),

  changePassword: async (id, newPassword) => {
    const hashed = await bcrypt.hash(newPassword, 10);
    return await userDAL.updateUserById(id, { password: hashed });
  }
};

module.exports = userService;
 
3, controllers/userController.js
const express = require('express');
const router = express.Router();
const userService = require('../services/userService');

// Register
router.post('/register', async (req, res) => {
  try {
    // Here, verify captcha if integrating Google reCAPTCHA
    const user = await userService.register(req.body);
    res.status(201).json(user);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Login
router.post('/login', async (req, res) => {
  try {
    // Captcha validation can go here
    const user = await userService.login(req.body.email, req.body.password);
    res.status(200).json(user); // Ideally, return a JWT token
  } catch (err) {
    res.status(401).json({ message: err.message });
  }
});

// Get Profile
router.get('/:id', async (req, res) => {
  try {
    const user = await userService.getProfile(req.params.id);
    user ? res.status(200).json(user) : res.status(404).json({ message: 'User not found' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Update Profile
router.put('/:id', async (req, res) => {
  try {
    const updated = await userService.updateProfile(req.params.id, req.body);
    res.status(200).json(updated);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Change Password
router.put('/:id/password', async (req, res) => {
  try {
    const updated = await userService.changePassword(req.params.id, req.body.password);
    res.status(200).json({ message: 'Password updated' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

module.exports = router;

4, add to app.js
const userRoutes = require('./controllers/userController');
app.use('/api/users', userRoutes);
---------------------------------------------------------------------------------------------------------------------------
The best next step is to integrate JWT-based authentication.

step-1, install required packages:-  npm install jsonwebtoken bcrypt
step-2:- update .env:- JWT_SECRET=yourSuperSecretKey
                       JWT_EXPIRES_IN=1d
step-3:-JWT Utility-utils/jwt.js
const jwt = require('jsonwebtoken');

const generateToken = (user) => {
  return jwt.sign(
    {
      id: user._id,
      email: user.email,
      role: user.role
    },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRES_IN }
  );
};

const verifyToken = (token) => {
  return jwt.verify(token, process.env.JWT_SECRET);
};

module.exports = { generateToken, verifyToken };

step-4:- Middleware:-middleware/authMiddleware.js
const jwt = require('jsonwebtoken');

const authenticate = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ message: 'Access denied. No token provided.' });
  }

  const token = authHeader.split(' ')[1];
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded; // attach user to request
    next();
  } catch (err) {
    res.status(403).json({ message: 'Invalid token.' });
  }
};

const authorizeRoles = (...roles) => {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: 'Forbidden: Insufficient rights' });
    }
    next();
  };
};

module.exports = { authenticate, authorizeRoles };

 Step 5:Update userController.js Login
 const { generateToken } = require('../utils/jwt');

// Login
router.post('/login', async (req, res) => {
  try {
    const user = await userService.login(req.body.email, req.body.password);
    const token = generateToken(user);
    res.status(200).json({ token, user: { id: user._id, email: user.email, role: user.role } });
  } catch (err) {
    res.status(401).json({ message: err.message });
  }
});

Step 6: Protect Routes
i, in rentalController.js
const { authenticate, authorizeRoles } = require('../middleware/authMiddleware');

router.post('/', authenticate, async (req, res) => { ... });
router.get('/', authenticate, authorizeRoles('admin'), async (req, res) => { ... });

ii, carController.js
router.post('/', authenticate, authorizeRoles('admin'), async (req, res) => { ... });
---------------------------------------------------------------------------------------------------------------------------------------
Let's integrate JWT authentication into your Angular frontend.
step-1 install dependencies- npm install @auth0/angular-jwt
step-2 setup JWT Interceptor:-
Create an interceptor to automatically attach the JWT token to the request headers. "src/app/interceptors/jwt.interceptor.ts"

import { Injectable } from '@angular/core';
import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TokenStorageService } from '../services/token-storage.service'; // we'll create this service next

@Injectable()
export class JwtInterceptor implements HttpInterceptor {
  constructor(private tokenStorageService: TokenStorageService) {}

  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const token = this.tokenStorageService.getToken();
    if (token) {
      request = request.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`,
        },
      });
    }
    return next.handle(request);
  }
}

step-3 Token Storage Service:-
This service will manage the JWT token, storing it in localStorage and providing easy access to it.
src/app/services/token-storage.service.ts

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class TokenStorageService {
  private readonly TOKEN_KEY = 'auth-token';

  saveToken(token: string): void {
    window.localStorage.setItem(this.TOKEN_KEY, token);
  }

  getToken(): string | null {
    return window.localStorage.getItem(this.TOKEN_KEY);
  }

  removeToken(): void {
    window.localStorage.removeItem(this.TOKEN_KEY);
  }
}

Step 4: Update app.module.ts:-
Add the interceptor to your AppModule.
src/app/app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { JwtInterceptor } from './interceptors/jwt.interceptor'; // import the interceptor
import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule],
  providers: [
    {
      provide: HTTP_INTERCEPTORS,
      useClass: JwtInterceptor,
      multi: true,
    },
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}


Step 5: Create AuthService for Login:-
Create a service for handling login requests and token storage.
src/app/services/auth.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TokenStorageService } from './token-storage.service';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = 'http://localhost:5000/api/users'; // Replace with your API URL

  constructor(private http: HttpClient, private tokenStorageService: TokenStorageService) {}

  login(email: string, password: string): Observable<any> {
    return this.http.post<any>(`${this.apiUrl}/login`, { email, password });
  }

  register(userData: any): Observable<any> {
    return this.http.post<any>(`${this.apiUrl}/register`, userData);
  }

  logout(): void {
    this.tokenStorageService.removeToken();
  }
}

Step 6: Create Login Component:-
Create a simple login form in your Angular app.
src/app/components/login/login.component.ts

import { Component } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css'],
})
export class LoginComponent {
  email: string = '';
  password: string = '';
  errorMessage: string = '';

  constructor(private authService: AuthService, private router: Router) {}

  login(): void {
    this.authService.login(this.email, this.password).subscribe(
      (response) => {
        this.authService.login(response.token); // Store token
        this.router.navigate(['/dashboard']); // Redirect to a protected route
      },
      (error) => {
        this.errorMessage = error.error.message || 'Invalid login';
      }
    );
  }
}

ii, src/app/components/login/login.component.html
<div class="login-form">
  <h2>Login</h2>
  <form (ngSubmit)="login()">
    <input type="email" [(ngModel)]="email" name="email" placeholder="Email" required />
    <input type="password" [(ngModel)]="password" name="password" placeholder="Password" required />
    <button type="submit">Login</button>
  </form>
  <p *ngIf="errorMessage">{{ errorMessage }}</p>
</div>

Step 7: Protect Routes:-
Use the AuthGuard to protect routes that require authentication.
src/app/guards/auth.guard.ts

import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { TokenStorageService } from '../services/token-storage.service';

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  constructor(private tokenStorageService: TokenStorageService, private router: Router) {}

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
    const token = this.tokenStorageService.getToken();
    if (!token) {
      this.router.navigate(['/login']);
      return false;
    }
    return true;
  }
}

src/app/app-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './components/login/login.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { AuthGuard } from './guards/auth.guard';

const routes: Routes = [
  { path: '', redirectTo: '/login', pathMatch: 'full' },
  { path: 'login', component: LoginComponent },
  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] }, // Protected route
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule {}
-------------------------------------------------------------------------------------------------------------------------------
 Let’s implement role-based UI elements in Angular to display content based on the logged-in user’s role (e.g., admin or user). This will help you show different parts of the UI depending on whether the user has admin privileges or not.

Step 1: Extend the TokenStorageService
We will update the TokenStorageService to not only store and retrieve the token but also to store and retrieve the user role (from the JWT payload).
 src/app/services/token-storage.service.ts

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class TokenStorageService {
  private readonly TOKEN_KEY = 'auth-token';
  private readonly ROLE_KEY = 'auth-role';

  saveToken(token: string): void {
    window.localStorage.setItem(this.TOKEN_KEY, token);
    const decoded = this.decodeToken(token);
    if (decoded) {
      this.saveRole(decoded.role);
    }
  }

  getToken(): string | null {
    return window.localStorage.getItem(this.TOKEN_KEY);
  }

  removeToken(): void {
    window.localStorage.removeItem(this.TOKEN_KEY);
    window.localStorage.removeItem(this.ROLE_KEY);
  }

  saveRole(role: string): void {
    window.localStorage.setItem(this.ROLE_KEY, role);
  }

  getRole(): string | null {
    return window.localStorage.getItem(this.ROLE_KEY);
  }

  decodeToken(token: string): any {
    try {
      return JSON.parse(atob(token.split('.')[1]));
    } catch (e) {
      return null;
    }
  }
}

 Step 2: Display Role-Based Content in Components
Now that we have the user role in localStorage, we can display role-specific content in the UI. Let’s show an example in the Dashboard component, 
where the content changes depending on whether the user is an admin or a user.
src/app/components/dashboard/dashboard.component.ts

import { Component, OnInit } from '@angular/core';
import { TokenStorageService } from '../../services/token-storage.service';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css'],
})
export class DashboardComponent implements OnInit {
  role: string | null = null;

  constructor(private tokenStorageService: TokenStorageService) {}

  ngOnInit(): void {
    this.role = this.tokenStorageService.getRole();
  }
}

ii, src/app/components/dashboard/dashboard.component.html
<div class="dashboard">
  <h2>Welcome to Your Dashboard</h2>

  <div *ngIf="role === 'admin'">
    <p>You are an admin. Here you can manage users, view statistics, etc.</p>
    <button routerLink="/admin">Go to Admin Panel</button>
  </div>

  <div *ngIf="role === 'user'">
    <p>You are a user. Here you can view your rentals and manage your account.</p>
    <button routerLink="/profile">Go to Profile</button>
  </div>
</div>

Step 3: Update Routes for Role-Based Navigation
You can also create role-based routes for admin-specific pages (e.g., /admin) and user-specific pages (e.g., /profile).
src/app/app-routing.module.ts

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './components/login/login.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { AdminPanelComponent } from './components/admin-panel/admin-panel.component';
import { ProfileComponent } from './components/profile/profile.component';
import { AuthGuard } from './guards/auth.guard';
import { RoleGuard } from './guards/role.guard';

const routes: Routes = [
  { path: '', redirectTo: '/login', pathMatch: 'full' },
  { path: 'login', component: LoginComponent },
  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },
  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },
  { path: 'admin', component: AdminPanelComponent, canActivate: [AuthGuard, RoleGuard], data: { role: 'admin' } }, // Admin route
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule {}

Step 4: Create RoleGuard for Role-Based Protection
We will create a RoleGuard to ensure that only users with the correct role can access specific routes like /admin.
src/app/guards/role.guard.ts

import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { TokenStorageService } from '../services/token-storage.service';

@Injectable({
  providedIn: 'root',
})
export class RoleGuard implements CanActivate {
  constructor(private tokenStorageService: TokenStorageService, private router: Router) {}

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
    const role = this.tokenStorageService.getRole();
    const requiredRole = route.data['role'];
    if (role !== requiredRole) {
      this.router.navigate(['/dashboard']);
      return false;
    }
    return true;
  }
}


auth.controller.js
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/user.model');

const SECRET_KEY = process.env.JWT_SECRET || 'your_secret_key';

// Register a new user
exports.register = async (req, res) => {
  try {
    const { name, email, password, role = 'user' } = req.body;

    // Check if user already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) return res.status(400).json({ message: 'User already exists' });

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create and save the user
    const newUser = new User({ name, email, password: hashedPassword, role });
    await newUser.save();

    res.status(201).json({ message: 'User registered successfully' });
  } catch (err) {
    res.status(500).json({ message: 'Server error', error: err.message });
  }
};

// Login a user
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Find user
    const user = await User.findOne({ email });
    if (!user) return res.status(401).json({ message: 'Invalid email or password' });

    // Compare passwords
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: 'Invalid email or password' });

    // Generate token
    const token = jwt.sign(
      { id: user._id, email: user.email, role: user.role },
      SECRET_KEY,
      { expiresIn: '1d' }
    );

    res.status(200).json({
      message: 'Login successful',
      token,
      user: { id: user._id, name: user.name, email: user.email, role: user.role }
    });
  } catch (err) {
    res.status(500).json({ message: 'Server error', error: err.message });
  }
};


Step 5: Test the Role-Based UI-check chatGPT
------------------------------------------------------------------------------------------------------------------------------------------------
from here on follow chatgpt instructions
